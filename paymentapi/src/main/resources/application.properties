spring.application.name=paymentapi

# PostgreSQL Configuration
POSTGRES_HOST=${POSTGRES_HOST:localhost:5432}

## PostgreSQL
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}/mydb
spring.datasource.username=paymentapi
spring.datasource.password=password

# create and drop table, good for testing, production set to none or comment it
spring.jpa.hibernate.ddl-auto=create-drop

# app custom property, if true, insert data for testing
app.db.init.enabled=true

# enable query logging
spring.jpa.show-sql=true

# Kafka Consumer Configuration
spring.kafka.topic.name=topic-event-1
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=my_group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=com.kibit.consumerapp.dto.KafkaMessage:com.kibit.paymentapi.dto.KafkaMessage

# Kafka Producer Configuration
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Bulkhead Configuration
resilience4j.bulkhead.instances.paymentBulkhead.maxConcurrentCalls=10
resilience4j.bulkhead.instances.paymentBulkhead.maxWaitDuration=20s